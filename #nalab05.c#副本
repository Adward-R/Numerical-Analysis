#include <stdio.h>
#include <math.h>
#include <iostream>
#define MAX_SIZE 100
 
int EigenV(int n, double a[][MAX_SIZE], double *lambda, double v[],
    double TOL, int MAXN);
 
int main()
{
    int n, MAXN, m, i, j, k;
    double a[MAX_SIZE][MAX_SIZE], v[MAX_SIZE];
    double lambda, TOL;
 
    while (scanf("%d", &n) != EOF) {
        for (i=0; i<n; i++)
        for (j=0; j<n; j++)
        scanf("%lf", &a[i][j]);
        scanf("%lf %d", &TOL, &MAXN);
        scanf("%d", &m);
        for (i=0; i<m; i++) {
            scanf("%lf", &lambda);
            for (j=0; j<n; j++)
            scanf("%lf", &v[j]);
            switch (EigenV(n, a, &lambda, v, TOL, MAXN)) {
                case -1:
                    printf("%12.8f is an eigenvalue.\n", lambda );
                    break;
                case 0:
                    printf("Maximum number of iterations exceeded.\n");
                    break;
                case 1:
                    printf("%12.8f\n", lambda );
                    for (k=0; k<n; k++)
                    printf("%12.8f ", v[k]);
                    printf("\n");
                    break;
            }
        }
        printf("\n");
    }
 
    return 0;
}

void factorization(int n, double& a, double& L, double& U){
    for (int i=0;i<n;i++){
        L[i][i] = 1;
    }
    if (a[0][0]==0){
        cout<<"Factorization impossible"<<endl;
    }
    else{
        U[0][0] = a[0][0];
    }
    for (int j=1;j<n;j++){
        U[0][j] = a[0][j];
        L[j][0] = a[j][0] / U[0][0];
    }
    for (int i=1;i<n-1;i++){
        if (a[i][i]==0){
            cout<<"Factorization impossible"<<endl;
        }
        else{
            U[i][i] = a[i][i];
            for (int k=0;k<i;k++){
                U[i][i] -= L[i][k] * U[k][i];
            }
        }
        for (int j=i+1;j<n;j++){
            U[i][j] = a[i][j];
            for (int k=0;k<i;k++){
                U[i][j] -= L[i][k] * U[k][j];
            }
            L[j][i] = a[j][i];
            for (int k=0;k<i;k++){
                L[j][i] -= L[j][k] * U[k][i];
            }
            L[j][i] /= U[i][i];
        }
    }
    U[n-1][n-1] = a[n-1][n-1];
    for (int k=0;k<n-1;k++){
        U[n-1][n-1] -= L[n][k] * U[k][n];
    }
}

void solve(double& L, double& U, double& x, double& b){
    x[0] = b[0] / L[0][0];
    for (int i;i<n;i++){
        y[i] = b[i];
        for (int j=0;j<i;i++){
            y[i] -= L[i][j] * y[j];
        }
    }
    x[n-1]
    for (int )
}